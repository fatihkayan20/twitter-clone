// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id             String    @id @map("_id")
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    email          String    @unique
    name           String?
    username       String    @unique
    profilePicture String?
    dateOfBirth    DateTime?

    tweets       Tweet[]
    likes        Like[]
    activities   Notification[] @relation(name: "sender")
    notification Notification[] @relation(name: "receiver")

    followers  Follow[] @relation(name: "follower")
    followings Follow[] @relation(name: "following")
}

model Follow {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    follower   User?   @relation(name: "follower", fields: [followerId], references: [id])
    followerId String?

    following   User?   @relation(name: "following", fields: [followingId], references: [id])
    followingId String?

    @@unique([followerId, followingId])
}

model Tweet {
    id        String   @id @map("_id")
    content   String?
    images    String[] @default([])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?
    likes  Like[]

    parentId String? @map("parent_id")
    parent   Tweet?  @relation("ParentSubTweets", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    subTweets    Tweet[]        @relation("ParentSubTweets")
    Notification Notification[]
}

model Like {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    tweet   Tweet?  @relation(fields: [tweetId], references: [id])
    tweetId String?

    @@unique([userId, tweetId])
}

model Notification {
    id        String   @id @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type       NotificationType
    isSubTweet Boolean?         @default(false)

    sender   User?   @relation(name: "sender", fields: [senderId], references: [id])
    senderId String?

    receiver   User?   @relation(name: "receiver", fields: [receiverId], references: [id])
    receiverId String?

    tweet   Tweet?  @relation(fields: [tweetId], references: [id])
    tweetId String?
}

enum NotificationType {
    LIKE
    COMMENT
    FOLLOW
}
